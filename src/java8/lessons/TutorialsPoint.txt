Source: https://www.tutorialspoint.com/java8/java8_overview.htm

Overview:
----------

In Java8 provided supports for functional programming, new JavaScript engine, new APIs for date time manipulation,
new streaming API etc.

New Features
1. Lambda expression - Adds functional processing capability to Java.
2. Method references - Referencing functions by their names instead of invoking them directly. Using functions as parameter.
3. Default method - Interface to have default method implementation.
4. New tools - New compiler tools and utilities are added like 'jdeps' to figure out dependencies.
5. Stream API - New stream API to facilitate pipeline processing
6. Date Time API - Improved date time API.
7. Optional - Emphasis on best practises to handle null values properly.
8. Nashorn, JavaScript Engine - A Java-based engine to execute JavaScript code.

`
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Comparator;


public class Java8Tester {
    public static void main(String args[]) {
        List<String> names1 = new ArrayList<String>();
        names1.add("Palash ");
        names1.add("Forhad ");
        names1.add("Jisaan ");
        names1.add("Ridoy ");

        List<String> names2 = new ArrayList<String>();
        names2.add("Palash ");
        names2.add("Forhad ");
        names2.add("Jisaan ");
        names2.add("Ridoy ");

        Java8Tester tester = new Java8Tester();
        System.out.println("Sort using Java 7 syntax: ");

        tester.sortUsingJava7(names1);
        System.out.println(names1);
        System.out.println("Sort using Java 8 syntax: ");

        tester.sortUsingJava8(names2);
        System.out.println(names2);
    }


    // sort using java 7
    private void sortUsingJava7(List<String> names) {
        Collections.sort(names, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return s1.compareTo(s2);
            }
        });
    }

    // sort using java 8
    private void sortUsingJava8(List<String> names) {
        Collections.sort(names, (s1, s2) -> s1.compareTo(s2));
    }
}
`