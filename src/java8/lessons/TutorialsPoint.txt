Source: https://www.tutorialspoint.com/java8/java8_overview.htm

Overview:
----------

In Java8 provided supports for functional programming, new JavaScript engine, new APIs for date time manipulation,
new streaming API etc.

New Features
1. Lambda expression - Adds functional processing capability to Java.
2. Method references - Referencing functions by their names instead of invoking them directly. Using functions as parameter.
3. Default method - Interface to have default method implementation.
4. New tools - New compiler tools and utilities are added like 'jdeps' to figure out dependencies.
5. Stream API - New stream API to facilitate pipeline processing
6. Date Time API - Improved date time API.
7. Optional - Emphasis on best practises to handle null values properly.
8. Nashorn, JavaScript Engine - A Java-based engine to execute JavaScript code.

`
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Comparator;


public class Java8Tester {
    public static void main(String args[]) {
        List<String> names1 = new ArrayList<String>();
        names1.add("Palash ");
        names1.add("Forhad ");
        names1.add("Jisaan ");
        names1.add("Ridoy ");

        List<String> names2 = new ArrayList<String>();
        names2.add("Palash ");
        names2.add("Forhad ");
        names2.add("Jisaan ");
        names2.add("Ridoy ");

        Java8Tester tester = new Java8Tester();
        System.out.println("Sort using Java 7 syntax: ");

        tester.sortUsingJava7(names1);
        System.out.println(names1);
        System.out.println("Sort using Java 8 syntax: ");

        tester.sortUsingJava8(names2);
        System.out.println(names2);
    }


    // sort using java 7
    private void sortUsingJava7(List<String> names) {
        Collections.sort(names, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return s1.compareTo(s2);
            }
        });
    }

    // sort using java 8
    private void sortUsingJava8(List<String> names) {
        Collections.sort(names, (s1, s2) -> s1.compareTo(s2));
    }
}
`

Lambda Expressions:
-------------------

Lambda expressions are introduced in Java 8 and are touted to be the biggest feature of Java 8.
Lambda expression facilities functional programming, and simplifies the development a lot.


Syntax
A lambda expression is characterized by the following syntax.
`
parameter -> expression body
`

Following are the important characteristics of a lambda expression

1. Optional type declaration - No need to declare the type of a parameter. The compiler can inference
the same from the value of the parameter.

2. Optional parenthesis around parameter - No need to declare a single parameter in parenthesis.
For multiple parameters, parentheses are required.

3. Optional curly braces - No need to use curly braces in expression body if the body contains a single
statement.

4. Optional return keyword - The compiler automatically returns the value if the body has a single expression
to return the value. Curly braces are required to indicate that expression returns a value.


Lambda expressions example
`
public class Java8Tester {
    public static void main(String args[]) {
        Java8Tester tester = new Java8Tester();

        // with type declaration
        MathOperation addition = (int a, int b) -> a + b;

        // with out type declaration
        MathOperation subtraction = (a, b) -> a - b;

        // with return statement along with curly braces
        MathOperation multiplication = (int a, int b) -> { return a * b; };

        // without return statement and without curly braces
        MathOperation division = (int a, int b) -> a / b;

        System.out.println("10 + 5 = " + tester.operate(10, 5, addition));
        System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));
        System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));
        System.out.println("10 / 5 = " + tester.operate(10, 5, division));

        // without parenthesis
        GreetingService greetService1 = message ->
    }
   
}
`



















